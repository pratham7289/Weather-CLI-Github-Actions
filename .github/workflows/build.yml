name: Build and Release Weather CLI Tool

on:
  push:
    branches:
      - dev
      - main

env:
  BUILD_NUMBER: ${{ github.run_number }}

permissions:
  contents: write  # Grant write permissions for releases using the default token
jobs:
  build:
    runs-on: self-hosted

    outputs:
      binary_name: ${{ steps.set_output.outputs.binary_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use system-installed Python 3.9
        run: |
          python3.9 --version
          pip3.9 install --upgrade pip
          pip3.9 install requests pyinstaller

      - name: Build the project
        run: |
          pyinstaller --onefile weather.py
          if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            BIN_NAME="weather-dev-${{ env.BUILD_NUMBER }}"
            mv dist/weather dist/$BIN_NAME
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            BIN_NAME="weather-main-${{ env.BUILD_NUMBER }}"
            mv dist/weather dist/$BIN_NAME
          fi
          echo "BINARY_NAME=$BIN_NAME" >> $GITHUB_ENV

      - name: Set output for binary name
        id: set_output
        run: echo "binary_name=${BINARY_NAME}" >> $GITHUB_OUTPUT

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: weather-tool-${{ github.ref_name }}
          path: dist/${{ env.BINARY_NAME }}

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: weather-tool-${{ github.ref_name }}
          path: dist/

      - name: Create GitHub Release (Pre-release for dev, Release for main)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="v1.0.0-${{ github.ref_name }}-${{ env.BUILD_NUMBER }}"
          BIN_NAME="${{ needs.build.outputs.binary_name }}"
          
          if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            gh release create "$VERSION" dist/$BIN_NAME \
              --title "Dev Build $VERSION" \
              --notes "Automated pre-release build for development." \
              --prerelease
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            VERSION="v1.0.0-${{ env.BUILD_NUMBER }}"
            gh release create "$VERSION" dist/$BIN_NAME \
              --title "Release $VERSION" \
              --notes "Stable production release."
          fi

